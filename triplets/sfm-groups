#!/bin/bash

#  sfm-suite
#
#      Nils Hamel - nils.hamel@bluewin.ch
#      Copyright (c) 2016-2019 DHLAB, EPFL
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

    SFM_PIPEV="20160511"

#
#   script - script variables
#

    SFM_TMPDR="/tmp/sfm-$(echo $0-$SFM_PIPEV | sha256sum | cut -c-16)"
    SFM_CMDBK="$0 $@"
    SFM_MOUNT="/media/gargantua/1000-plane/0000-sfm"
    SFM_LISTING="/media/gargantua/0500-plane/0000-image"
    SFM_MODEL="$(date +"%Y%m%d-%H%M%S")"
    SFM_COORD="$(grep -c ^processor /proc/cpuinfo)"
    SFM_SCALE=""
    SFM_CHAIN="incremental"
    SFM_FOCAL=""
    SFM_RADIA="3"
    SFM_DENSE="omvs"
    SFM_DENSP="standard"
    SFM_RESOL="0"
    SFM_POINT="SIFT"
    SFM_FORCE="NORMAL"
    SFM_MATCH="f"
    SFM_PAIRS=""
    SFM_GROUPS="" # txt file with list of individual parts that will be merged
    SFM_PFILE=""
    SFM_DEPTH="20"
    SFM_CYCLE="1"
    SFM_ACCEP="tiff tif jpg jpeg png bmp"
    SFM_MESHE=""

#
#   script - arguments and parameters
#

    function arg() {

        # parsing argument and parameters #
        while [[ $# > 0 ]]; do

            # read argument #
            sfm_arg="$1"; shift

            # switch on arguments #
            case $sfm_arg in

                --mount|-m)
                    SFM_MOUNT="$1"
                shift ;;
                --suffix|-s)
                    SFM_MODEL="$SFM_MODEL-${1,,}"
                shift ;;
                --thread|-t)
                    SFM_COORD="$1"
                shift ;;
                --scale)
                    SFM_SCALE="$1"
                shift ;;
                --optimisation-pipeline|--opipe)
                    SFM_CHAIN="$1"
                shift ;;
                --initialise-focal|--focal)
                    SFM_FOCAL="$1"
                shift ;;
                --initialise-radial)
                    SFM_RADIA="$1"
                shift ;;
                --densify-pipeline|--dpipe)
                    SFM_DENSE="$1"
                shift ;;
                --densify-preset)
                    SFM_DENSP="$1"
                shift ;;
                --densify-scale)
                    SFM_RESOL="$1"
                shift;;
                --features-mode)
                    SFM_POINT="$1"
                shift ;;
                --features-preset)
                    SFM_FORCE="$1"
                shift ;;
                --matches-mode)
                    SFM_MATCH="$1"
                shift ;;
                --pairs-mode)
                    SFM_PAIRS="$1"
                shift ;;
                --groups)
                    SFM_GROUPS="$1"
                shift ;;
                --pairs-file)
                    SFM_PFILE="$1"
                shift ;;
                --pairs-depth)
                    SFM_DEPTH="$1"
                shift ;;
                --pairs-cycle)
                    SFM_CYCLE="$1"
                shift ;;
                --mesh-pipeline)
                    SFM_MESHE="$1"
                shift;;

            esac

        done

    }

#
#   script - execution
#

    function exe() {

        # check log consistency #
        if [ -z $SFM_LOGS ]; then

            # execute command and abort on error #
            eval $1 1>&2 || exit 1

        else

            # execute command and abort on error #
            eval $1 >> $SFM_LOGS 2>&1 || exit 1

        fi

    }

#
#   script - verification
#

    function chk() {

        # check consistency - abort execution #
        [ -f $SFM_ROOT/$SFM_NAME/systems/pipe-$SFM_PIPEV ] || { msg "error : pipeline"; exit 1; }

    }

#
#   script - messages
#

    function log() {

        # log message #
        [ -d $(dirname $SFM_LOGS) ] && echo "[$(date +"%y%m%d:%H%M%S")][$SFM_COORD] sfm $SFM_PIPEV : $1" >> $SFM_LOGS

    }

    function msg() {

        # display message #
        >&2 echo "$1"

    }

#
#   script - temporary
#

    function tmp() {

        # check mode - create/delete temporary storage #
        if [ "$1" == "create" ]; then mkdir -p $SFM_TMPDR; else rmdir $SFM_TMPDR; fi

    }

#
#   script - source elements injection
#

    function image() {
        # check scale parameter #
        if [ -n "$SFM_SCALE" ]; then

            # check focal parameter #
            if [ -n "$SFM_FOCAL" ]; then

                # correct focal value #
                SFM_FOCAL=$(echo "scale=3; $SFM_FOCAL * ( $SFM_SCALE / 100.0 )" | bc)

                # update focal parameter #
                SFM_FOCAL="--initialise-focal $SFM_FOCAL"

            fi

            # update scale parameter #
            SFM_SCALE="-scale $SFM_SCALE%"

        else
            # check focal parameter #
            if [ -n "$SFM_FOCAL" ]; then

                # update focal parameter #
                SFM_FOCAL="--initialise-focal $SFM_FOCAL"

            fi

        fi

        # create temporary directory #
        tmp create

        # enumerating source directories #
      
        while read -r line
        do
            num=$(echo $line | awk -F- '{print NF-1}') # number of occurences of "-" in the folder's name
            
            # if there are 8 occurences, take only the part after the 2 first occurences of "-"            
            if [ $num -eq 8 ]; then

                images_folder=$SFM_LISTING/${line:16:4}/${line:20:4}/${line:16}
            
            else
                if [ $num -eq 6 ]; then

                    images_folder=$SFM_LISTING/${line:0:4}/${line:4:4}/$line
                
                else
            
                    exit 1
                 
                fi
            fi

		    for SFM_ELEMENT in $images_folder/*; do

		        # element analysis #
		        SFM_BASE=$(basename $SFM_ELEMENT)

		        # image format filtering #
		        if [ -n "$(echo $SFM_ACCEP | grep -i ${SFM_BASE##*.})" ]; then

		            # copy to temporary directory - tiff i/o extremely slow over nfs #
		            exe "rsync -L $SFM_ELEMENT $SFM_TMPDR/$SFM_BASE"

		            # convert element to tiff #
		            exe "convert $SFM_TMPDR/$SFM_BASE +compress $SFM_SCALE $SFM_TMPDR/${SFM_BASE%.*}.tif"

		            # copy to image directory - tiff i/o extremely slow over nfs #
		            exe "rsync $SFM_TMPDR/${SFM_BASE%.*}.tif $SFM_ROOT/$SFM_MODEL/images/"

		            # remove from temporary directoy #
		            exe "rm -f $SFM_TMPDR/${SFM_BASE%.*}.tif $SFM_TMPDR/$SFM_BASE"

		            # log message #
		            log "injecting $SFM_BASE source element"

		        else

		            # log message #
		            log "rejecting $SFM_BASE source element"

		        fi

		    done
		done < $SFM_GROUPS

        # delete temporary directory #
        tmp delete

    }

#
#   script - main
#

    # argument and parameters #
    arg $@


    # compose standard variables #
    SFM_NAME=$SFM_MODEL

    SFM_ROOT=$SFM_MOUNT/${SFM_NAME:0:4}/${SFM_NAME:4:4}

    # creating structure #
    exe "sfm-create --mount $SFM_MOUNT --sfm $SFM_MODEL"

    # initialise logs #
    SFM_LOGS=$SFM_ROOT/$SFM_NAME/systems/pipe-$SFM_PIPEV-logs
    exe "echo 'roger'"

    # image injection #
    image
    exe "echo 'francoise'"

    # initialise structure #
    exe "sfm-initialise --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD $SFM_FOCAL --initialise-radial $SFM_RADIA"
    exe "echo 'henri'"

    # create a sub-directory to store all the files needed temporarily
    exe "mkdir $SFM_ROOT/$SFM_NAME/systems/groups"
    exe "echo 'claude'"

    # copy the file containing information on the groups 
    exe "cp $SFM_GROUPS $SFM_ROOT/$SFM_NAME/systems/groups/groups.txt"
    exe "echo 'benoit'"

    # compute features #
    exe "sfm-features --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --features-mode $SFM_POINT --features-preset $SFM_FORCE"
    exe "echo 'catherine'"
 
    # create pair file #
    $SFM_PFILE=$SFM_ROOT/$SFM_NAME/systems/omvg/pair_list.txt
    exe "echo '$SFM_PFILE'"
    python make-triplets-v2.py $SFM_MOUNT $SFM_LISTING $SFM_MODEL $SFM_GROUPS $SFM_PFILE
    exe "echo 'yoann'"

	# compute matches #
#    exe "sfm-matches --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --matches-mode $SFM_MATCH --matches-pair $SFM_PFILE" 
    exe "sfm-matches --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --matches-mode $SFM_MATCH" 

    exe "echo 'patrick'"

    # bundle adjustment #
    exe "sfm-optimisation --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --optimisation-pipeline $SFM_CHAIN"
    exe "echo 'isa'"

    # densification #
    exe "sfm-densify --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --densify-pipeline $SFM_DENSE --densify-preset $SFM_DENSP --densify-scale $SFM_RESOL"
    exe "echo 'frank'"
    # meshing #
    exe "sfm-mesh --mount $SFM_MOUNT --sfm $SFM_MODEL --thread $SFM_COORD --mesh-pipeline $SFM_MESHE"

    # export command #
    log "command=($SFM_CMDBK)"


    # send message #
    exit 0

